{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many java developers attend more than one universities?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Where are most of pythonistas located?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Who went to most number of universities?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Do I have any expert on mainframes?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many are knowledgable on all of - java, python, javascript, security?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Where do most of them work at?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Where did most of them study?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Where does most marketing managers work?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Do I have anyone with expertise on Java and Cyber security?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many Texas-based experts do I have on Java?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which data scientist is based out of Texas?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which skill is popular among people with bachelor degrees?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a degree in computer science from Stanford University?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a software engineer at Google?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a skill level of intermediate in Python?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have held a position in New York City?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a master's degree in data science?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a data analyst at Facebook?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a skill level of beginner in JavaScript?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a bachelor's degree in electrical engineering?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a project manager in London?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a PhD in physics from MIT?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a degree in Computer Science from Stanford University?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a Software Engineer at Google?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a skill level of 'intermediate' in Python?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Master's degree in Data Science?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a Data Analyst in New York?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a PhD in Physics from MIT?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a Product Manager at Amazon?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a skill level of 'beginner' in JavaScript?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Bachelor's degree in Mathematics?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked as a Data Scientist in San Francisco?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the top 5 people with the most skills"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) RETURN p, COUNT(s) as skill_count ORDER BY skill_count DESC LIMIT 5```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a degree in Computer Science from MIT"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'mit' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have held a position at Google for more than 2 years?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'google' AND duration.between(date(pos.startDate), date(pos.endDate)).years > 2 RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all people who have a 'master' level skill in Python"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'master' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all positions in New York City that started in 2020"}, {"role": "assistant", "content": "```MATCH (pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' AND pos.startDate STARTS WITH '2020' RETURN pos```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have a Bachelor's degree with a score above 3.5?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toFloat(e.score) > 3.5 RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all companies where at least 3 people have held a position"}, {"role": "assistant", "content": "```MATCH (c:Company)<-[:AT_COMPANY]-(:Position)<-[:HAS_POSITION]-(p:Person) WITH c, COUNT(p) as people_count WHERE people_count >= 3 RETURN c```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a skill in Java and have worked at Amazon"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(s.name) CONTAINS 'java' AND toLower(c.name) CONTAINS 'amazon' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have a Ph.D. and have held a position as a Data Scientist?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(e.degree) CONTAINS 'ph.d' AND toLower(pos.title) CONTAINS 'data scientist' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all skills that are held by at least 10 people"}, {"role": "assistant", "content": "```MATCH (s:Skill)<-[:HAS_SKILL]-(p:Person) WITH s, COUNT(p) as people_count WHERE people_count >= 10 RETURN s```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have graduated from Stanford University with a Master's degree"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.university) CONTAINS 'stanford' AND toLower(e.degree) CONTAINS 'master' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have held a position as a Software Engineer in California?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'software engineer' AND (toLower(pos.location) CONTAINS 'california' OR toLower(pos.location) CONTAINS 'ca') RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all positions with a start date in January 2021"}, {"role": "assistant", "content": "```MATCH (pos:Position) WHERE pos.startDate STARTS WITH '2021-01' RETURN pos```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a skill in JavaScript and have held a position as a Frontend Developer"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(pos.title) CONTAINS 'frontend developer' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have a Bachelor's degree in Mechanical Engineering?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mechanical engineering' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all companies where at least 5 people have held a position as a Data Analyst"}, {"role": "assistant", "content": "```MATCH (c:Company)<-[:AT_COMPANY]-(:Position)<-[:HAS_POSITION]-(p:Person) WHERE toLower((:Position)<-[:HAS_POSITION]-(p)).title) CONTAINS 'data analyst' WITH c, COUNT(p) as people_count WHERE people_count >= 5 RETURN c```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a skill in SQL and have held a position as a Database Administrator"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'sql' AND toLower(pos.title) CONTAINS 'database administrator' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Which people have held a position in London with a start date in 2019?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'london' AND pos.startDate STARTS WITH '2019' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all skills that are held by people who have worked at Microsoft"}, {"role": "assistant", "content": "```MATCH (s:Skill)<-[:HAS_SKILL]-(p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'microsoft' RETURN DISTINCT s```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a Master's degree in Data Science and have held a position as a Machine Learning Engineer"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' AND toLower(pos.title) CONTAINS 'machine learning engineer' RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the top 5 people with the highest number of skills"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WITH p, COUNT(s) as skill_count ORDER BY skill_count DESC LIMIT 5 RETURN p.id, p.role, p.description, skill_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a degree in Computer Science and have worked at Google"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'google' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all positions held by people with a master's degree in the last 5 years"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND (date().year - date(e.graduation_date).year) <= 5 MATCH (p)-[:HAS_POSITION]->(pos:Position) RETURN pos.id, pos.title, pos.location, pos.startDate, pos.endDate, pos.url```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a skill level of 'expert' in Python and have worked in a position with 'data scientist' in the title"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all companies where people with a Ph.D. have worked"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'ph.d' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN DISTINCT c.id, c.name```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the average score of people who graduated from MIT"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.university) CONTAINS 'mit' RETURN AVG(toFloat(e.score))```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all people who have worked in New York and have a skill level of 'intermediate' in Java"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'intermediate' MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york' RETURN p.id, p.role, p.description```"}]}
