{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the total number of positions held by people with a bachelor's degree in the last 10 years"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND (date().year - date(e.graduation_date).year) <= 10 MATCH (p)-[:HAS_POSITION]->(pos:Position) RETURN COUNT(pos)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all skills of people who have worked at Amazon and have a master's degree"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'amazon' MATCH (p)-[:HAS_SKILL]->(s:Skill) RETURN s.id, s.name, s.level```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 universities with the highest number of graduates in our database"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH e.university as university, COUNT(p) as graduate_count ORDER BY graduate_count DESC LIMIT 3 RETURN university, graduate_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all people who have a skill level of 'beginner' in JavaScript and have worked in a position with 'web developer' in the title"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'web developer' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all companies where people with a skill level of 'expert' in SQL have worked"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'sql' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN DISTINCT c.id, c.name```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the top 5 skills with the highest number of experts"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.level) CONTAINS 'expert' WITH s.name as skill_name, COUNT(p) as expert_count ORDER BY expert_count DESC LIMIT 5 RETURN skill_name, expert_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all people who have a degree in Mathematics and have worked at Microsoft"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'mathematics' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'microsoft' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all positions held by people with a Ph.D. in Physics in the last 3 years"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'ph.d' AND toLower(e.university) CONTAINS 'physics' AND (date().year - date(e.graduation_date).year) <= 3 MATCH (p)-[:HAS_POSITION]->(pos:Position) RETURN pos.id, pos.title, pos.location, pos.startDate, pos.endDate, pos.url```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the average score of people who graduated from Stanford with a master's degree"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.university) CONTAINS 'stanford' AND toLower(e.degree) CONTAINS 'master' RETURN AVG(toFloat(e.score))```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all people who have worked in California and have a skill level of 'expert' in Machine Learning"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'machine learning' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'california' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the total number of positions held by people with a bachelor's degree in Engineering in the last 7 years"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'engineering' AND (date().year - date(e.graduation_date).year) <= 7 MATCH (p)-[:HAS_POSITION]->(pos:Position) RETURN COUNT(pos)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all skills of people who have worked at Facebook and have a Ph.D"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'ph.d' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'facebook' MATCH (p)-[:HAS_SKILL]->(s:Skill) RETURN s.id, s.name, s.level```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 companies with the highest number of employees with a skill level of 'expert' in Data Science"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'data science' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WITH c.name as company_name, COUNT(p) as expert_count ORDER BY expert_count DESC LIMIT 3 RETURN company_name, expert_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have a degree in Computer Science and are experts in Python"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'computer science' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have worked at Google and have a Master's degree"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'google' AND toLower(e.degree) CONTAINS 'master' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked in New York as a software engineer and have a Bachelor's degree in Computer Science"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(pos.location) CONTAINS 'new york' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'computer science' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have worked at Amazon and have a Ph.D.?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'amazon' AND toLower(e.degree) CONTAINS 'ph.d.' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have worked as a data scientist and have a skill level of 'expert' in R programming language"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(s.name) CONTAINS 'r' AND toLower(s.level) CONTAINS 'expert' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked at Microsoft and have a skill level of 'intermediate' in Java"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(c.name) CONTAINS 'microsoft' AND toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'intermediate' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have a Master's degree in Data Science and have worked in San Francisco"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(pos.location) CONTAINS 'san francisco' AND toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'data science' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Bachelor's degree in Computer Science and are experts in JavaScript?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'computer science' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a product manager and have a skill level of 'expert' in SQL"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(s.name) CONTAINS 'sql' AND toLower(s.level) CONTAINS 'expert' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have worked at Facebook and have a Bachelor's degree in Business Administration"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'facebook' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'business administration' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Ph.D. in Physics and are experts in C++?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'c++' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'ph.d.' AND toLower(e.university) CONTAINS 'physics' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a software developer and have a skill level of 'intermediate' in Ruby"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'software developer' AND toLower(s.name) CONTAINS 'ruby' AND toLower(s.level) CONTAINS 'intermediate' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have a Master's degree in Mathematics and have worked in Boston"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(pos.location) CONTAINS 'boston' AND toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'mathematics' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Bachelor's degree in Electrical Engineering and are experts in MATLAB?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'matlab' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'electrical engineering' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a data analyst and have a skill level of 'expert' in Tableau"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(s.name) CONTAINS 'tableau' AND toLower(s.level) CONTAINS 'expert' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have worked at IBM and have a Master's degree in Information Technology"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'ibm' AND toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'information technology' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Ph.D. in Chemistry and are experts in Python?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'ph.d.' AND toLower(e.university) CONTAINS 'chemistry' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a project manager and have a skill level of 'intermediate' in Microsoft Project"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(s.name) CONTAINS 'microsoft project' AND toLower(s.level) CONTAINS 'intermediate' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have a Bachelor's degree in Mechanical Engineering and have worked in Los Angeles"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(pos.location) CONTAINS 'los angeles' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'mechanical engineering' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Master's degree in Finance and are experts in Excel?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'excel' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'finance' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a network engineer and have a skill level of 'expert' in Cisco Networking"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'network engineer' AND toLower(s.name) CONTAINS 'cisco networking' AND toLower(s.level) CONTAINS 'expert' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have worked at Apple and have a Ph.D. in Computer Engineering"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'apple' AND toLower(e.degree) CONTAINS 'ph.d.' AND toLower(e.university) CONTAINS 'computer engineering' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: How many people have a Bachelor's degree in Civil Engineering and are experts in AutoCAD?"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'autocad' AND toLower(s.level) CONTAINS 'expert' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'civil engineering' RETURN COUNT(p)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the names of people who have worked as a marketing manager and have a skill level of 'intermediate' in Google Analytics"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(pos.title) CONTAINS 'marketing manager' AND toLower(s.name) CONTAINS 'google analytics' AND toLower(s.level) CONTAINS 'intermediate' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List the names of people who have a Master's degree in Marketing and have worked in Chicago"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(pos.location) CONTAINS 'chicago' AND toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'marketing' RETURN p.id, p.role, p.description```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 people with the highest number of skills who have worked at Google and graduated from a university with a score of 3.5 or higher"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(edu:Education) WHERE toLower(c.name) CONTAINS 'google' AND toFloat(edu.score) >= 3.5 WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 3 RETURN p, skill_count```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have held a 'Software Engineer' position in California-based companies and have expertise in Python, along with their education details"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(edu:Education) WHERE toLower(pos.title) CONTAINS 'software engineer' AND (toLower(pos.location) CONTAINS 'california' OR toLower(pos.location) CONTAINS 'ca') AND toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' RETURN p, edu```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the average score of all people who have worked as a 'Data Scientist' and have a skill level of 'intermediate' or higher in R programming language"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(edu:Education) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(s.name) CONTAINS 'r' AND (toLower(s.level) CONTAINS 'intermediate' OR toLower(s.level) CONTAINS 'expert') WITH p, toFloat(edu.score) AS score RETURN AVG(score)```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Retrieve the details of all positions held by people who have a Master's degree in Computer Science and have worked at companies with 'Inc.' in their name"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(edu:Education), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(edu.degree) CONTAINS 'master' AND toLower(edu.university) CONTAINS 'computer science' AND toLower(c.name) CONTAINS 'inc.' RETURN pos```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the people who have a 'Product Manager' position at a New York-based company and have a skill level of 'expert' in at least two different skills"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND (toLower(pos.location) CONTAINS 'new york' OR toLower(pos.location) CONTAINS 'ny') AND toLower(s.level) CONTAINS 'expert' WITH p, COUNT(DISTINCT s) AS skill_count WHERE skill_count >= 2 RETURN p```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 most skilled Java experts who have worked at Google and graduated from a university with a score of 3.5 or higher"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND toLower(c.name) CONTAINS 'google' AND toFloat(e.score) >= 3.5 RETURN p, s, pos, c, e ORDER BY toFloat(s.level) DESC LIMIT 3```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have held a position with the title 'Software Engineer' in California and have a skill level of 'intermediate' or higher in Python"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' AND (toLower(s.level) CONTAINS 'intermediate' OR toLower(s.level) CONTAINS 'expert') AND toLower(pos.title) CONTAINS 'software engineer' AND toLower(pos.location) CONTAINS 'california' RETURN p, s, pos```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have a Master's degree in Computer Science and have worked at a company with 'Inc.' in its name"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.university) CONTAINS 'computer science' AND toLower(c.name) CONTAINS 'inc.' RETURN p, e, pos, c```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Retrieve the details of people who have worked as a 'Data Scientist' in New York and have a skill level of 'expert' in R programming language"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'r' AND toLower(s.level) CONTAINS 'expert' AND toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'new york' RETURN p, s, pos```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have a Bachelor's degree from MIT and have worked at a company with 'LLC' in its name, along with their skills and positions"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'mit' AND toLower(c.name) CONTAINS 'llc' RETURN p, e, pos, c, s```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 people with the highest number of skills who have worked at Google and have a Master's degree"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(c.name) CONTAINS 'google' AND toLower(e.degree) CONTAINS 'master' RETURN p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 3```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have worked as a 'Software Engineer' in 'California' and have a skill level of 'expert' in 'Python'"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND (toLower(pos.location) CONTAINS 'california' OR toLower(pos.location) CONTAINS 'ca') AND toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' RETURN p, s, pos, c```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have graduated from 'Stanford University' with a 'Bachelor's degree' and have worked at 'Amazon' as a 'Data Scientist'"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(e.university) CONTAINS 'stanford' AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(c.name) CONTAINS 'amazon' AND toLower(pos.title) CONTAINS 'data scientist' RETURN p, e, pos, c```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have a 'PhD' degree and have worked in a 'New York' based position with a skill level of 'expert' in 'Java'"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND (toLower(pos.location) CONTAINS 'new york' OR toLower(pos.location) CONTAINS 'ny') AND toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' RETURN p, s, pos, e```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have a skill level of 'intermediate' in 'JavaScript' and have worked at 'Microsoft' in a 'Washington' based position with a 'Bachelor's degree' from 'MIT'"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company), (p)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'intermediate' AND toLower(c.name) CONTAINS 'microsoft' AND (toLower(pos.location) CONTAINS 'washington' OR toLower(pos.location) CONTAINS 'wa') AND toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.university) CONTAINS 'mit' RETURN p, s, pos, c, e```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find the top 3 people with the highest number of skills"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WITH p, COUNT(s) as skill_count ORDER BY skill_count DESC LIMIT 3 RETURN p.id, p.role, p.description, skill_count"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have a degree in 'Computer Science' and are currently working at a company with 'Software' in its name"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'software' AND pos.endDate = '' RETURN p.id, p.role, p.description, e.degree, e.university, c.name```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have worked in 'New York' and have 'Python' as an expert-level skill"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york' RETURN p.id, p.role, p.description, s.name, s.level, pos.title, pos.location```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have graduated from 'MIT' and are currently working in a 'California'-based company"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.university) CONTAINS 'mit' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE (toLower(pos.location) CONTAINS 'california' OR toLower(pos.location) CONTAINS 'ca') AND pos.endDate = '' RETURN p.id, p.role, p.description, e.degree, e.university, c.name, pos.title, pos.location```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have a 'Master's degree' and have worked in a 'Texas'-based company with 'Data Analyst' as their position title"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') AND toLower(pos.title) CONTAINS 'data analyst' RETURN p.id, p.role, p.description, e.degree, e.university, c.name, pos.title, pos.location```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: List all the people who have 'Java' as an expert-level skill and have worked in a company with 'Google' in its name"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(c.name) CONTAINS 'google' RETURN p.id, p.role, p.description, s.name, s.level, c.name, pos.title, pos.location```"}]}
{"messages": [{"role": "system", "content": "You are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and following the instructions: 1. Generate Cypher query compatible ONLY for Neo4j Version 5, 2. Do not use EXISTS, SIZE keywords in the cypher. Use alias when using the WITH keyword, 3. Use only Nodes and relationships mentioned in the schema, 4. Always enclose the Cypher output inside 3 backticks, 5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`, 6. Candidate node is synonymous to Person, 7. Always use aliases to refer the node in the query, 8. Cypher is NOT SQL. So, do not mix and match the syntaxes. Schema: (:Person {label: 'Person', id: string, role: string, description: string})-[:HAS_POSITION {}]->(:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string}), (:Position {label: 'Position', id: string, title: string, location: string, startDate: string, endDate: string, url: string})-[:AT_COMPANY {}]->(:Company {label:'Company', id: string, name: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_SKILL {}]->(:Skill {label:'Skill', id: string,name: string,level: string}), (:Person {label: 'Person',id: string, role: string, description: string})-[:HAS_EDUCATION {}]->(:Education {label:'Education', id: string, degree: string, university: string, graduationDate: string, score: string, url: string}). Samples: $samples, Question: $question, Answer:"}, {"role": "user", "content": "Schema:\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_POSITION{}]->(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})\n(:Position{label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string})-[:AT_COMPANY{}]->(:Company{label:'Company',id:string,name:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_SKILL{}]->(:Skill{label:'Skill',id:string,name:string,level:string})\n(:Person{label:'Person',id:string,role:string,description:string})-[:HAS_EDUCATION{}]->(:Education{label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string})\nQuestion: Find all the people who have a 'Ph.D.' degree and have worked in a 'London'-based company with 'Data Scientist' as their position title"}, {"role": "assistant", "content": "```MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'ph.d.' MATCH (p)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.location) CONTAINS 'london' AND toLower(pos.title) CONTAINS 'data scientist' RETURN p.id, p.role, p.description, e.degree, e.university, c.name, pos.title, pos.location```"}]}
